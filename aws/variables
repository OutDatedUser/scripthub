if game.CoreGui:FindFirstChild("ScreenGui") then
    game.CoreGui["ScreenGui"]:Destroy()
  end
  getgenv().loaded = true
  local function AutoClickNpc()
      game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
  end
  
  local function AutoClickGrind()
      game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
  end
  
  local function getReward()
       for i = 0, 14,1 do
      game:GetService("ReplicatedStorage").Packages.Knit.Services.TimedRewardService.RE.onClaim:FireServer(i)
  end
  end
  b = require(game:GetService("ReplicatedStorage").Data.RebirthRanks)
  ranks = {}
  for i,vals in pairs(b) do 
      
  end
  getgenv().loaded = true
  
      spawn(function()
      while task.wait() do
      getgenv().ValuesUpdate = {
          ['Knuckles'] = game:GetService("Players").LocalPlayer.leaderstats.Knuckles.Value,
          ['Wins'] = game:GetService("Players").LocalPlayer.leaderstats.Wins.Value,
          ['Hands'] = game:GetService("Players").LocalPlayer.leaderstats.Hands.Value,
          ['Biceps'] = game:GetService("Players").LocalPlayer.leaderstats.Biceps.Value,
      }
          task.wait(.25)
          end
      end)
  
      Zones = {}
      for _,v in game:GetService("Workspace").GameObjects.ArmWrestling:GetChildren() do 
          if v:IsA("Folder")  then
              table.insert(Zones,v.Name)
          end
      end
  
  
      local T = {"K","M","B","T","Qa","Qi","Sx","Sp","Oc","Non"}
      local function comma_value(n)
          if not tonumber(n) then return n end
          if n < 10000 then return math.floor(n) end
          local d = math.floor(math.log10(n)/3)*3
          local s = tostring(n/(10^d)):sub(1,5)
          return s.." "..tostring(T[math.floor(d/3)])
      end
  
  
      local gamename = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
      local repo = 'https://raw.githubusercontent.com/NecoWareHub/Hub/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'InfinityWare | Reborn | '..gamename,
    Center = true,
    AutoShow = true,
    TabPadding = 5,
    MenuFadeTime = 0.5,
})
-- CALLBACK NOTE:
-- Passing in callback functions via the initial element parameters (i.e. Callback = function(Value)...) works
-- HOWEVER, using Toggles/Options.INDEX:OnChanged(function(Value) ... ) is the RECOMMENDED way to do this.
-- I strongly recommend decoupling UI code from logic code. i.e. Create your UI elements FIRST, and THEN setup :OnChanged functions later.

-- You do not have to set your tabs & groups up this way, just a prefrence.
local Tabs = {
    -- Main
	Information = Window:AddTab('Information'),
    Main = Window:AddTab('Main'),
	AutoHatch = Window:AddTab('AutoOpen'),
	Webhook = Window:AddTab('Webhook'),
    ['UI Settings'] = Window:AddTab('Settings'),
}


    -- Main
local Information = Tabs.Information:AddLeftGroupbox('Statisctic : ')
local Information2 = Tabs.Information:AddRightGroupbox('Script : ')
local User = Information:AddLabel('User : '..game.Players.LocalPlayer.Name,false)
local UserId = Information:AddLabel('Userid : '..game.Players.LocalPlayer.UserId,false)
local gameid = Information:AddLabel('PlaceId : '..game.PlaceId,false)
local Game = Information:AddLabel('Game : '..gamename,false)
local crates = {"RustCrate","SilverCrate","GoldCrate","DiamondCrate","RadioactiveCrate","PlatinumCrate","EasterCrate"}
local Hatching = Tabs.AutoHatch:AddLeftGroupbox('Hatching features : ')
local Delete = Tabs.AutoHatch:AddLeftGroupbox('Auto Delete : ')

Hatching:AddDropdown('AutoHatching', {
    Values = {"Limited","Earth", "Icy", "Lava", "Blackhole", "Crystal", "Molten", "Solar", "Moon", "Ice", "Burning", "Coconut", "Palm", "Treasure", "Clam", "KingFish", "Poseidon", "Rust", "Widget", "Atom", "Iridescent", "Mutant", "Nuclear","TRex","Herbivore","GemDino","DinoFossil","Atom","DinoMythic","VoidEgg","StarEgg","NebulaEgg","BlackHoleEgg","Rocket","Cyberpunk","Meteor","Deepsea","Praetorian Egg","Lionheart Egg","Gladius Egg","Arena Egg","Heated Egg","Eternal Egg","Inferno Egg","Ember Egg","SharkEgg","JellyfishEgg","CrabEgg"},
    Default = "", -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Select Egg',
    Tooltip = 'Egg Selection ', -- Information shown when you hover over the dropdown

    Callback = function(Value)
	getgenv().EggSelect = Value
        warn('[IW Supporter] Selected  :', Value)
    end
})



Delete:AddToggle('AutoDeleteCommon', { -- Flag Name goes here
    Text = 'Auto Delete Common pets', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Delete',
	Callback = function(Value)
		getgenv().AutoDeleteCommon = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

Delete:AddToggle('AutoDeleteUncommon', { -- Flag Name goes here
    Text = 'Auto Delete UnCommon pets', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Delete',
	Callback = function(Value)
		getgenv().AutoDeleteUncommon = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

Delete:AddToggle('AutoDeleteRare', { -- Flag Name goes here
    Text = 'Auto Delete Rare pets', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Delete',
	Callback = function(Value)
		getgenv().AutoDeleteRare = Value
		warn('[IW Supporter] Selected :', Value)
	end
})


Delete:AddToggle('AutoDeleteEpic', { -- Flag Name goes here
    Text = 'Auto Delete Epic pets', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Delete',
	Callback = function(Value)
		getgenv().AutoDeleteEpic = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

Delete:AddToggle('AutoDeleteLegendary', { -- Flag Name goes here
    Text = 'Auto Delete Legendary pets', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Delete',
	Callback = function(Value)
		getgenv().AutoDeleteLegendary = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

Delete:AddToggle('AutoDeleteMythic', { -- Flag Name goes here
    Text = 'Auto Delete Mythic pets', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Delete',
	Callback = function(Value)
		getgenv().AutoDeleteMythic = Value
		warn('[IW Supporter] Selected :', Value)
	end
})


--[[Delete:AddToggle('AutoCraft', { -- Flag Name goes here
    Text = 'Auto Craft by Rarity', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Craft',
	Callback = function(Value)
		getgenv().AutoCraftRar = Value
		warn('[IW Supporter] Selected :', Value)
	end
})]]

function AutoHatchx1()
	local args = {
    	[1] = getgenv().EggSelect,
    	[2] = {},
    	[4] = false
}
game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
end



function AutoHatchx3()
	local args = {
    [1] = getgenv().EggSelect,
    [2] = {},
    [4] = true,
	[5] = false
}
game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
end

function AutoHatchx8()
	local args = {
    [1] = getgenv().EggSelect,
    [2] = {},
    [4] = false,
	[5] = true
}
game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
end


Hatching:AddSlider('Cooldowns', {
    Text = 'AutoHatch Speed',
    Default = "0.1",
    Min = "0.1",
    Max = "3",
    Rounding = "1",
	Suffix = " sec.",
    Compact = false,

    Callback = function(Value)
	getgenv().CoolDown = Value
        print('[IW Supporter] Selected :', Value)
    end
})
Hatching:AddToggle('AutoHatchx1', { -- Flag Name goes here
    Text = 'AutoHatch [x1]', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Hatching egg x1',
	Callback = function(Value)
		getgenv().AutoHatchingx1 = Value
		warn('[IW Supporter] Selected :', Value)
	end
})


--[[LuckyDraw:AddToggle('AutoLuckyDraw', { -- Flag Name goes here
    Text = 'Auto Lucky Draw ', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enables Auto Lucky Draw',
	Callback = function(Value)
		getgenv().AutoLuckyDraw = Value
		warn('[IW Supporter] Selected :', Value)
	end
})]]


Hatching:AddToggle('AutoHatchx3', { -- Flag Name goes here
    Text = 'AutoHatch [x3]', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Hatching egg x3',
	Callback = function(Value)
		getgenv().AutoHatchingx3 = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

Hatching:AddToggle('AutoHatchx8', { -- Flag Name goes here
    Text = 'AutoHatch [x8]', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Hatching egg x8',
	Callback = function(Value)
		getgenv().AutoHatchingx8 = Value
		warn('[IW Supporter] Selected :', Value)
	end
})




local Crates = Tabs.AutoHatch:AddRightGroupbox('Crates features : ')
local HatchingEvent = Tabs.AutoHatch:AddRightGroupbox('Event features : ')

BeachNpcs = {}
for i,v in pairs(game:GetService("Workspace").GameObjects.ArmWrestling["3"].NPC:GetChildren()) do
    table.insert(BeachNpcs, v.Name)
end





HatchingEvent:AddDropdown('SelectBeachBoss', {
    Values = BeachNpcs,
    Default = "", -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Select Beach Boss',
    Tooltip = 'Beach Boss Selection ', -- Information shown when you hover over the dropdown

    Callback = function(Value)
	getgenv().EventNpcQuest = Value
        warn('[IW Supporter] Selected :', Value)
    end
})


HatchingEvent:AddDropdown('SelectQuest', {
    Values = {"Defeat Ripper Doc", "Defeat 1 Beach Boss"},
    Default = "", -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Select Quest ',
    Tooltip = 'Beach Boss Quest Selections ', -- Information shown when you hover over the dropdown

    Callback = function(Value)
	getgenv().QuestBeta = Value
        warn('[IW Supporter] Selected :', Value)
    end
})

HatchingEvent:AddToggle('AutoQuest', { -- Flag Name goes here
    Text = 'Enable AutoFarm Eggs', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'AutoFarm',
	Callback = function(Value)
		getgenv().AutoFarmQuest = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

HatchingEvent:AddToggle('AutoHatchEventx1', { -- Flag Name goes here
    Text = 'AutoHatch Event [x1]', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Hatching Event egg x1',
	Callback = function(Value)
		getgenv().EvAutoHatchingx1 = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

HatchingEvent:AddToggle('AutoHatchEventx3', { -- Flag Name goes here
    Text = 'AutoHatch Event [x3]', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Hatching Event egg x3',
	Callback = function(Value)
		getgenv().EvAutoHatchingx3 = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

HatchingEvent:AddToggle('AutoHatchEventx8', { -- Flag Name goes here
    Text = 'AutoHatch Event [x8]', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Hatching Event egg x8',
	Callback = function(Value)
		getgenv().EvAutoHatchingx8 = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

Crates:AddDropdown('Crates', {
    Values = crates,
    Default = "RustCrate", -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Select Crate',
    Tooltip = 'Crate Selection ', -- Information shown when you hover over the dropdown

    Callback = function(Value)
	getgenv().CrateSelection = Value
        warn('[IW Supporter] Selected  :', Value)
    end
})

Crates:AddToggle('CratesOpen', { -- Flag Name goes here
    Text = 'Auto Open Crates', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Open Crates',
	Callback = function(Value)
		getgenv().AutoOpenCrates = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

local Webhook = Tabs.Webhook:AddLeftGroupbox('Webhook Functions : ')
local WebhookTextUrl = Webhook:AddLabel('Webhook Url : nothing',true)
local WebhookTextTime = Webhook:AddLabel('Webhook Time : nothing',true)

local PetWebhook = Tabs.Webhook:AddRightGroupbox('Webhook Functions : ')
local PetWebhookTextUrl = PetWebhook:AddLabel('Webhook Url : nothing',true)
local PetWebhookTextTime = PetWebhook:AddLabel('Webhook Time : nothing',true)

local Script = Information2:AddLabel('Name : InfinityWare',true)
local Script2 = Information2:AddLabel('Version : v1.2 ',true)
local Script2 = Information2:AddLabel('Discord : dsc.gg/ireborn ',true)

Webhook:AddInput('Url', {
    Default = 'Enter Url',
    Numeric = false, -- true / false, only allows numbers
    Finished = true, -- true / false, only calls callback when you press enter

    Text = 'Enter Url',
    Tooltip = 'Webhook Url', -- Information shown when you hover over the textbox

    Placeholder = 'Enter Webhook Url', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text

    Callback = function(Value)
		getgenv().Url = Value
    end
})

Webhook:AddInput('Time', {
    Default = 'Enter Webhook Time',
    Numeric = true, -- true / false, only allows numbers
    Finished = true, -- true / false, only calls callback when you press enter

    Text = 'Enter the time of sending webhook',
    Tooltip = 'Webhook time', -- Information shown when you hover over the textbox

    Placeholder = 'Enter Time to send webhook', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text

    Callback = function(Value)
		getgenv().Time = Value
    end
})


Webhook:AddToggle('Webhook', { -- Flag Name goes here
    Text = 'Auto Send Stats Webhook', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Send Webhook',
	Callback = function(Value)
		getgenv().Webhook = Value
		warn('[IW Supporter] Selected :', Value)
	end
})


PetWebhook:AddInput('PetUrl', {
    Default = 'Enter Webhook Url',
    Numeric = false, -- true / false, only allows numbers
    Finished = true, -- true / false, only calls callback when you press enter

    Text = 'Enter Pet Url',
    Tooltip = 'Webhook Url', -- Information shown when you hover over the textbox

    Placeholder = 'Enter Webhook Url', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text

    Callback = function(Value)
		getgenv().PetUrl = Value
    end
})

PetWebhook:AddInput('PetTime', {
    Default = 'Enter Webhook Time',
    Numeric = true, -- true / false, only allows numbers
    Finished = true, -- true / false, only calls callback when you press enter
    
    Text = 'Enter the time of sending pet webhook',
    Tooltip = 'Webhook time', -- Information shown when you hover over the textbox

    Placeholder = 'Enter Time to send webhook', -- placeholder text when the box is empty
    -- MaxLength is also an option which is the max length of the text

    Callback = function(Value)
		getgenv().PetTime = Value
    end
})

PetWebhook:AddToggle('PetWebhook', { -- Flag Name goes here
    Text = 'Auto Send Pet Webhook', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Send Webhook',
	Callback = function(Value)
		getgenv().PetWebhook = Value
		warn('[IW Supporter] Selected :', Value)
	end
})



game:GetService("ReplicatedStorage").Packages.Knit.Services.EasterZoneService.RF.HitBreakable:InvokeServer(ohString1)





function TeleportToBackToEaster()
		local args = {
 			[1] = workspace.Zones["Easter"].Interactables.Teleports.Locations.Start
		}
        game:GetService("ReplicatedStorage").Packages.Knit.Services.ZoneService.RE.teleport:FireServer(unpack(args))
end
function TeleportToBackToSchool()
    local args = {
         [1] = workspace.Zones["1"].Interactables.Teleports.Locations.BackToSchool
    }
    game:GetService("ReplicatedStorage").Packages.Knit.Services.ZoneService.RE.teleport:FireServer(unpack(args))
end


function TeleportToFuturistic()
		local args = {
 			[1] = workspace.Zones["2"].Interactables.Teleports.Locations.Futuristic
		}
        game:GetService("ReplicatedStorage").Packages.Knit.Services.ZoneService.RE.teleport:FireServer(unpack(args))
    end

function TeleportToBeach()
		local args = {
 			[1] = workspace.Zones["3"].Interactables.Teleports.Locations.Beach
		}
        game:GetService("ReplicatedStorage").Packages.Knit.Services.ZoneService.RE.teleport:FireServer(unpack(args))
    end

function TeleportToNuclearBunker()
		local args = {
 			[1] = workspace.Zones["4"].Interactables.Teleports.Locations.NuclearBunker
		}
        game:GetService("ReplicatedStorage").Packages.Knit.Services.ZoneService.RE.teleport:FireServer(unpack(args))
    end

function TeleportToDinoWorld()
		local args = {
 			[1] = game:GetService("Workspace").Zones[5].Interactables.Teleport.Locations.DinoWorld
		}
        game:GetService("ReplicatedStorage").Packages.Knit.Services.ZoneService.RE.teleport:FireServer(unpack(args))
    end
local Main = Tabs.Main:AddLeftGroupbox('ArmWrestle : ')
local Main2 = Tabs.Main:AddRightGroupbox('Grinding : ')
local Main3 = Tabs.Main:AddLeftGroupbox('Selection : ')
local Main4 = Tabs.Main:AddRightGroupbox('Weights : ')
local Main5 = Tabs.Main:AddRightGroupbox('Other : ')
local Teleports = Tabs.Main:AddLeftGroupbox('Teleports : ')
Teleports:AddToggle('BackToSchool', { -- Flag Name goes here
    Text = '[1] Teleport to [BackToSchool]', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Teleport',
	Callback = function()
		TeleportToBackToSchool()
		warn('[IW Supporter] Selected :', Value)
	end
})

Teleports:AddToggle('Futuristic', { -- Flag Name goes here
    Text = '[2] Teleport to [Futuristic]', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Teleport',
	Callback = function()
		TeleportToFuturistic()
		warn('[IW Supporter] Selected :', Value)
	end
})

Teleports:AddToggle('Beach', { -- Flag Name goes here
    Text = '[3] Teleport to [Beach]', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Teleport',
	Callback = function()
		TeleportToBeach()
		warn('[IW Supporter] Selected :', Value)
	end
})


Teleports:AddToggle('NuclearBunke', { -- Flag Name goes here
    Text = '[4] Teleport to [Nuclear]', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Teleport ',
	Callback = function()
		TeleportToNuclearBunker()
		warn('[IW Supporter] Selected :', Value)
	end
})

Teleports:AddToggle('NuclearBunke', { -- Flag Name goes here
    Text = '[5] Teleport to [Dino World]', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Teleport ',
	Callback = function()
		TeleportToDinoWorld()
		warn('[IW Supporter] Selected :', Value)
	end
})

Main:AddToggle('AutoClick', { -- Flag Name goes here
    Text = 'Auto Click', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enable Auto Click ',
	Callback = function(Value)
		getgenv().AutoClick = Value
	end
})

Main:AddToggle('AutoArmWrestle', { -- Flag Name goes here
    Text = 'Auto Arm Wrestle', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enable Auto Arm Wrestle ', 
	Callback = function (Value)
		getgenv().AutoAW = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

Main:AddToggle('AutoRebirth', { -- Flag Name goes here
    Text = 'Auto Rebirth', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enable Auto Rebirth ',
	Callback = function(Value)
		getgenv().AutoRebirth = Value
		warn('[IW Supporter] Selected :', Value)
	end
})
Main:AddToggle('AutoSuperRebirth', { -- Flag Name goes here
    Text = 'Auto Super Rebirth', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enable Auto Super Rebirth ',
	Callback = function(Value)
		getgenv().AutoSuperRebirth = Value
		warn('[IW Supporter] Selected :', Value)
	end
})





local Alert = Main3:AddLabel('Make Normal Selection ',true)


Main3:AddDropdown('Worlds', {
    Values = Zones,
    Default = "", -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Select World',
    Tooltip = 'World Selection ', -- Information shown when you hover over the dropdown

    Callback = function(Value)
	getgenv().World = Value
        warn('[IW Supporter] Selected :', Value)
    end
})

Npc = {}
  
for i = 1, 9 do
    local zone = tostring(i,"AquaEvent","Easter","HuntWorld","GreekEvent")
    local npcFolder = game:GetService("Workspace").GameObjects.ArmWrestling[zone].NPC
    
    for _, npc in ipairs(npcFolder:GetChildren()) do
        table.insert(Npc, npc.Name)
    end
end

Main3:AddDropdown('Npcs', {
    Values = Npc,
    Default = "", -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Select Npc',
    Tooltip = 'Npc Selection ', -- Information shown when you hover over the dropdown

    Callback = function(Value)
	getgenv().Npc = Value
        warn('[IW Supporter] Selected :', Value)
    end
})


Main3:AddDropdown('Knuckles', {
    Values = {"Tier1","Tier2","Tier3","Tier4","Tier5","Tier6","VIP"},
    Default = "Vip", -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Select PunchBags',
    Tooltip = 'PunchBags Selection ', -- Information shown when you hover over the dropdown

    Callback = function(Value)
	getgenv().PunchBags = Value
        warn('[IW Supporter] Selected  :', Value)
    end
})
spawn(function()
while getgenv().World and task.wait(5) do
if getgenv().World == "4" then
   Options.Knuckles.Values = {"Tier1","Tier2","Tier3","Tier4","VIP"}
   Options.Knuckles:SetValues()
elseif getgenv().World ~= "4" then
   Options.Knuckles.Values = {"Tier1","Tier2","Tier3","Tier4","Tier5","Tier6","VIP"}
   Options.Knuckles:SetValues()
end
end
end)

tools = {}
tool = game:GetService("ReplicatedStorage").Tools
for i,v in pairs(tool:GetChildren()) do 
	table.insert(tools, v.Name)
end

local function AutoAWS()
local args = {
	[1] = getgenv().Npc,
	[2] = workspace.GameObjects.ArmWrestling[getgenv().World].NPC[getgenv().Npc].Table,
	[3] = getgenv().World
}
game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))

end

local Kgs = {}
local toolsKg = game:GetService("ReplicatedStorage").Tools.Grips:GetChildren()

table.sort(toolsKg, function(a, b)
    local aNumber = tonumber(string.match(a.Name, "%d+"))
    local bNumber = tonumber(string.match(b.Name, "%d+"))

    return aNumber < bNumber
end)

for i, v in ipairs(toolsKg) do
    table.insert(Kgs, v.Name)
end


Main4:AddDropdown('ToolKg', {
    Values = Kgs,
    Default = "", -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Select Weight [Biceps]',
    Tooltip = 'Weight Selection ', -- Information shown when you hover over the dropdown

    Callback = function(Value)
	getgenv().BicepsKg = Value
         warn('[IW Supporter] Selected :', Value)
    end
})

Main4:AddDropdown('ToolKg2', {
    Values = Kgs,
    Default = "", -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Select Weight [Hands]',
    Tooltip = 'Weight Selection ', -- Information shown when you hover over the dropdown

    Callback = function(Value)
	getgenv().HandsKG = Value
        warn('[IW Supporter] Selected :', Value)
    end
})


Main2:AddToggle('AutoTrainGrips', { -- Flag Name goes here
    Text = 'Auto Train Hands', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enable Auto Train ',
	Callback = function(Value)
		getgenv().AutoGrips = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

Main2:AddToggle('AutoTrainBiceps', { -- Flag Name goes here
    Text = 'Auto Train Biceps', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enable Auto Train ',
	Callback = function(Value)
		getgenv().AutoTrainBiceps = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

Main5:AddToggle('AutoGifts', { -- Flag Name goes here
    Text = 'Auto Gifts', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enable Auto Gifts ',
	Callback = function(Value)
		getgenv().AutoGifts = Value
	 	warn('[IW Supporter] Selected :', Value)
	end
})
Main5:AddToggle('AutoSpin', { -- Flag Name goes here
    Text = 'Auto Spin', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enable Auto Spin ',
	Callback = function(Value)
		getgenv().AutoSpin = Value
	 	warn('[IW Supporter] Selected :', Value)
	end
})

Main5:AddToggle('AutoRedeem', { -- Flag Name goes here
    Text = 'Auto Redeem Codes', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enable Auto Gifts ',
	Callback = function(Value)
		getgenv().AutoRedeem = Value
	 	warn('[IW Supporter] Selected :', Value)
	end
})

Main5:AddToggle('AutoDaily', { -- Flag Name goes here
    Text = 'Auto Daily Rewards', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enable Auto Daily Rewards ',
	Callback = function(Value)
		getgenv().Rewards = Value
	 	warn('[IW Supporter] Selected :', Value)
	end
})
local RemoveGiftAlert = Main5:AddButton('Remove Gift Alert', function()
    game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Menus.Gifts.RoutePromptOverlay:Destroy()
end)

local RemoveSpinAlert = Main5:AddButton('Remove Spin Alert', function()
    game:GetService("Players").LocalPlayer.PlayerGui.GameUI.Menus.Spin.RoutePromptOverlay:Destroy()
end)

local RemoveWalls = Main5:AddButton('Remove Walls [World 5]', function()
local walls = game:GetService("Workspace").Zones['5'].Interactables.Training.Walls:GetChildren()

for key, v in pairs(walls) do
    if string.match(v.Name, "Tier") then
        for g, h in pairs(v.Wall:GetChildren()) do
            if h.Name ~= "1" then
                h:Destroy()
            end
        end
    end
end
end)

Main5:AddSlider('WalkSpeed', {
    Text = 'Player Speed',
    Default = 16,
    Min = 16,
    Max = 600,
    Rounding = 1,
	Suffix = " speed.",
    Compact = false,

    Callback = function(Value)
	while task.wait() do
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
	end
        print('[IW Supporter] Selected :', Value)
    end
})

Main5:AddSlider('JumpPower', {
    Text = 'JumpPower',
    Default = 20,
    Min = 16,
    Max = 200,
    Rounding = 1,
	Suffix = " power.",
    Compact = false,

    Callback = function(Value)
	while wait() do 
	game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
	end
        print('[IW Supporter] Selected :', Value)
    end
})

Main2:AddToggle('AutoTrainKnuckles', { -- Flag Name goes here
    Text = 'Auto Train Knuckles', -- Toggle Text
    Default = false, -- Default value (true / false)
    Tooltip = 'Enable Auto Train ',
	Callback = function(Value)
		getgenv().AutoKnuckles = Value
		warn('[IW Supporter] Selected :', Value)
	end
})

spawn(function()
Toggles.AutoTrainKnuckles:OnChanged(function() -- Flag Name
    while getgenv().AutoKnuckles and task.wait() do
		    local args = {
            [1] = getgenv().World,
            [2] = getgenv().PunchBags
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.PunchBagService.RE.onGiveStats:FireServer(unpack(args))
        wait()
	task.wait()
	end
end)
end)

spawn(function()
Toggles.AutoRebirth:OnChanged(function() -- Flag Name
    while getgenv().AutoRebirth and task.wait() do
        game:GetService("ReplicatedStorage").Packages.Knit.Services.RebirthService.RE.onRebirthRequest:FireServer()
	task.wait()
	end
end)
end)

--[[spawn(function()
Toggles.AutoLuckyDraw:OnChanged(function() -- Flag Name
    while getgenv().AutoLuckyDraw and task.wait() do
			AutoCogs()
	task.wait()
	end
end)
end)]]

spawn(function()
Toggles.AutoSuperRebirth:OnChanged(function() -- Flag Name
    while getgenv().AutoSuperRebirth and task.wait() do
        game:GetService("ReplicatedStorage").Packages.Knit.Services.RebirthService.RE.onSuperRebirth:FireServer()
	task.wait()
	end
end)
end)

spawn(function()
Toggles.AutoClick:OnChanged(function() -- Flag Name
    while getgenv().AutoClick and task.wait() do
		AutoClickNpc()
	task.wait()
	end
end)
end)

spawn(function()
Toggles.AutoSpin:OnChanged(function() -- Flag Name
    while getgenv().AutoSpin and task.wait(10) do
		game:GetService("ReplicatedStorage").Packages.Knit.Services.SpinService.RE.onSpinRequest:FireServer(false)
	task.wait()
	end
end)
end)


spawn(function()
Toggles.AutoRedeem:OnChanged(function() -- Flag Name
    while getgenv().AutoRedeem and task.wait() do
		local args = {
    		[1] = "noobs","release","axel","pinksandcastle","200m","enchant","Trading","Leagues","secret","gullible","Knighty"
		}
		game:GetService("ReplicatedStorage").Packages.Knit.Services.CodeRedemptionService.RE.onRedeem:FireServer(unpack(args))
	task.wait()
	end
end)
end)

spawn(function()
Toggles.AutoArmWrestle:OnChanged(function() -- Flag Name
    while getgenv().AutoAW and task.wait() do
		AutoAWS()
	task.wait()
	end
end)
end)

spawn(function()
Toggles.AutoHatchEventx1:OnChanged(function() -- Flag Name
    while getgenv().EvAutoHatchingx1 and task.wait() do
		game:GetService("ReplicatedStorage").Packages.Knit.Services.EventService.RF.ClaimEgg:InvokeServer()
	task.wait()
	end
end)
end)

spawn(function()
    Toggles.AutoDeleteCommon:OnChanged(function()
        while getgenv().AutoDeleteCommon and task.wait() do
			local a = game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.getOwned:InvokeServer(game:GetService("Players").LocalPlayer)
            for i, v in pairs(a) do
                if v.Rarity == "Common" then
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.delete:InvokeServer(i)
                end
            end
            task.wait()
        end
    end)
end)


spawn(function()
    Toggles.AutoDeleteUncommon:OnChanged(function()
        while getgenv().AutoDeleteUncommon and task.wait() do
			local a = game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.getOwned:InvokeServer(game:GetService("Players").LocalPlayer)
            for i, v in pairs(a) do
                if v.Rarity == "Uncommon" then
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.delete:InvokeServer(i)
                end
            end
            task.wait()
        end
    end)
end)


spawn(function()
    Toggles.AutoDeleteRare:OnChanged(function()
        while getgenv().AutoDeleteRare and task.wait() do
			local a = game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.getOwned:InvokeServer(game:GetService("Players").LocalPlayer)
            for i, v in pairs(a) do
                if v.Rarity == "Rare" then
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.delete:InvokeServer(i)
                end
            end
            task.wait()
        end
    end)
end)

spawn(function()
    Toggles.AutoDeleteEpic:OnChanged(function()
        while getgenv().AutoDeleteEpic and task.wait(0.1) do
			local a = game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.getOwned:InvokeServer(game:GetService("Players").LocalPlayer)
            for i, v in pairs(a) do
                if v.Rarity == "Epic" then
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.delete:InvokeServer(i)
                end
            end
            task.wait()
        end
    end)
end)


spawn(function()
    Toggles.AutoDeleteLegendary:OnChanged(function()
        while getgenv().AutoDeleteLegendary and task.wait(0.1) do
			local a = game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.getOwned:InvokeServer(game:GetService("Players").LocalPlayer)
            for i, v in pairs(a) do
                if v.Rarity == "Legendary" then
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.delete:InvokeServer(i)
                end
            end
            task.wait()
        end
    end)
end)

spawn(function()
    Toggles.AutoDeleteMythic:OnChanged(function()
        while getgenv().AutoDeleteMythic and task.wait(0.1) do
			local a = game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.getOwned:InvokeServer(game:GetService("Players").LocalPlayer)
            for i, v in pairs(a) do
                if v.Rarity == "Mythic" then
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PetService.RF.delete:InvokeServer(i)
                end
            end
            task.wait()
        end
    end)
end)

--[[spawn(function()
    Toggles.AutoCraft:OnChanged(function()
        while getgenv().AutoCraftRar and task.wait(0.1) do
            local a = game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.PetService.RF.getOwned:InvokeServer(game:GetService("Players").LocalPlayer)
            for i, v in pairs(a) do
                if v.Rarity == getgenv().Rarity  then
					local args = {
						[1] = i,
						[2] = false,
						[3] = true
					}
				game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.PetService.RF.craft:InvokeServer(unpack(args))                   
                end
            end
            task.wait()
        end
    end)
end)]]


spawn(function()
Toggles.AutoHatchEventx3:OnChanged(function() -- Flag Name
    while getgenv().EvAutoHatchingx3 and task.wait(0.1) do
        local args = {
            [1] = 3
        }
		game:GetService("ReplicatedStorage").Packages.Knit.Services.EventService.RF.ClaimEgg:InvokeServer(unpack(args))
	task.wait()
	end
end)
end)

spawn(function()
Toggles.AutoHatchEventx8:OnChanged(function() -- Flag Name
    while getgenv().EvAutoHatchingx8 and task.wait(0.1) do
        local args = {
            [1] = 8
        }
		game:GetService("ReplicatedStorage").Packages.Knit.Services.EventService.RF.ClaimEgg:InvokeServer(unpack(args))
	task.wait()
	end
end)
end)

spawn(function()
Toggles.CratesOpen:OnChanged(function() -- Flag Name
    while getgenv().AutoOpenCrates and task.wait() do
		local args = {
			[1] = getgenv().CrateSelection
			}
            game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmsService.RF.RollArmCrateForPlayer:InvokeServer(unpack(args))
	task.wait()
	end
end)
end)





--[[spawn(function()
Toggles.AutoEquip:OnChanged(function() -- Flag Name
    while getgenv().AutoEquip and task.wait() do
		OnEquipTool()
	task.wait()
	end
end)
end)]]


spawn(function()
    Toggles.AutoQuest:OnChanged(function() -- Flag Name
        if getgenv().QuestBeta == "Defeat Ripper Doc" then
            while getgenv().AutoFarmQuest and task.wait() do
                local args = {
                    [1] = "RipperDoc",
                    [2] = workspace.GameObjects.ArmWrestling["2"].NPC["RipperDoc"].Table,
                    [3] = "2"
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))
                AutoClickNpc()
            end
        elseif getgenv().QuestBeta == "Defeat 1 Beach Boss" then
            while getgenv().AutoFarmQuest and task.wait() do
                local args = {
                    [1] = getgenv().EventNpcQuest,
                    [2] = workspace.GameObjects.ArmWrestling["3"].NPC[getgenv().EventNpcQuest].Table,
                    [3] = "3"
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onEnterNPCTable:FireServer(unpack(args))
                AutoClickNpc()
            end
        end
        task.wait()
    end)
end)


spawn(function()
Toggles.AutoTrainBiceps:OnChanged(function() -- Flag Name

	local args = {
    	[1] = getgenv().World,
    	[2] = "Dumbells",
    	[3] = getgenv().HandsKG
	}

    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))	
    while getgenv().AutoTrainBiceps and task.wait() do
    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
	task.wait()
	end
end)
end)

spawn(function()
Toggles.AutoTrainGrips:OnChanged(function() -- Flag Name

	local args = {
    	[1] = getgenv().World,
    	[2] = "Grips",
    	[3] = getgenv().BicepsKg
	}

    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))	
while getgenv().AutoGrips and task.wait() do
    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
	task.wait()
	end
end)
end)




spawn(function()
Toggles.AutoGifts:OnChanged(function()
	while getgenv().AutoGifts and task.wait(5) do
		getReward()
	end
end)
end)




spawn(function()
Toggles.AutoHatchx1:OnChanged(function()
	while getgenv().AutoHatchingx1 and task.wait(getgenv().CoolDown or 1) do
		AutoHatchx1()
	end
end)
end)

spawn(function()
Toggles.AutoHatchx3:OnChanged(function()
	while getgenv().AutoHatchingx3 and task.wait(getgenv().CoolDown or 1) do
		AutoHatchx3()
	end
end)
end)

spawn(function()
Toggles.AutoHatchx8:OnChanged(function()
	while getgenv().AutoHatchingx8 and task.wait(getgenv().CoolDown or 1) do
		AutoHatchx8()
	end
end)
end)

local webhookQueue = {}
spawn(function()
    Toggles.PetWebhook:OnChanged(function()
        wait(getgenv().PetTime)
        function LWebHook(GettedPet, Rarity, image, mult)
            local one = image
            local two = one:gsub("rbxthumb://type=Asset&id=", "")
            local three = two:gsub(" ", "")
            local assetid = three
            local Image = game:HttpGet("https://thumbnails.roblox.com/v1/assets?assetIds="..assetid.."&size=512x512&format=Png&isCircular=false")
            Thing = game:GetService("HttpService"):JSONDecode(Image).data[1]
            local AvatarImage = Thing.imageUrl

            wait(getgenv().PetTime)
            local Embed = {
                title = 'AWS | PetsHook',
                color = 2829617,
                author = {
                    name = game.JobId,
                    url = AvatarImage
                },
                footer = {
                    text = 'dsc.gg/ireborn'
                },
                ["thumbnail"] = {
                    ["url"] = AvatarImage,
                },        
                ["fields"] = {
                    {
                        ["name"] = "**Hatched Pet:**",
                        ["value"] = GettedPet,
                        ["inline"] = false
                    },
                    {
                        ["name"] = "**Rarity:**",
                        ["value"] = Rarity,
                        ["inline"] = true
                    },
                    {
                        ["name"] = "**Multiplier:**",
                        ["value"] = mult,
                        ["inline"] = true
                    },
                    {
                        ["name"] = "**Egg:**",
                        ["value"] = getgenv().EggSelect,
                        ["inline"] = true
                    },
                },
                timestamp = os.date("%Y-%m-%dT%X.000Z")
            }
            (syn and syn.request or http_request) {
                Url = getgenv().PetUrl,
                Method = 'POST',
                Headers = {
                    ['Content-Type'] = 'application/json'
                },
                Body = game:GetService('HttpService'):JSONEncode( {embeds = { Embed } } )
            }
        end

        function GetPet()
            local LmfaoInvoke = game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(getgenv().EggSelect, {})
            if LmfaoInvoke ~= nil then
                for i, v in pairs(LmfaoInvoke) do
                    if v ~= nil or i ~= nil then
                        getgenv().GettedPet = v
                        if getgenv().Url ~= "" and getgenv().PetWebhook == true then
                            local huy = require(game:GetService("ReplicatedStorage").Data.PetData)
                            print("Image", huy[v]["Images"]["Normal"])
                            print("Multiplier", huy[v].Multiplier)
                            print("Rarity", huy[v].Rarity)
                            print("Display-Name", huy[v].DisplayName)
                            LWebHook(huy[v].DisplayName, huy[v].Rarity, huy[v]["Images"]["Normal"], huy[v].Multiplier)
                        end
                    end
                end
            end
        end

        spawn(function()
            Toggles.PetWebhook:OnChanged(function()
                while getgenv().PetWebhook and wait(getgenv().PetTime) do
                    GetPet()
                    wait()
                end
            end)
        end)
    end)
end)


local webhookQueue2 = {}
          spawn(function()
          Toggles.Webhook:OnChanged(function()
              while getgenv().Webhook and task.wait(getgenv().Time) do
              
              local T = {"K","M","B","T","Qa","Qi","Sx","Sp","Oc","Non"}
              local function comma_value(n)
              if not tonumber(n) then return n end
              if n < 10000 then return math.floor(n) end
              local d = math.floor(math.log10(n)/3)*3
              local s = tostring(n/(10^d)):sub(1,5)
              return s.." "..tostring(T[math.floor(d/3)])
          end
          end
          end)
          end)
spawn(function()
    Toggles.PetWebhook:OnChanged(function()
function MWebHook(TotalPower,Rebirths,ZoneMulti,Knuckles,Hand,Bicep,Wins) -- delay
    wait(getgenv().Time)
    local data2 = {
        content = nil,
        embeds = {
            {
                color = 2829617,
                fields = {
                    {
                        name = "[<:gifts:1146777697415078059>] TotalPower",
                        value = comma_value(TotalPower),
                        inline = true
                    },
                    {
                        name = "[<:Rebirth:1146775812834611220>] Rebirths",
                        value = comma_value(Rebirths),
                        inline = true
                    },
                    {
                        name = "[<:WorldBoost:1146774890200969237>] Zone Multiplier",
                        value = ZoneMulti,
                        inline = true
                    }, 
                    {
                        name = "[<:Knuckles:1146773152844750948>] Knuckle Strength",
                        value = comma_value(Knuckles),
                        inline = true
                    },
                    {
                        name = "[<:grips:1146772690087194684>] Hand Strength",
                        value = comma_value(Hand),
                        inline = true
                    },
                    {
                        name = "[<:Biceps:1146773185770029086>] Bicep power",
                        value = comma_value(Bicep),
                        inline = true
                    },   
                    {
                        name = "[<:Wins:1146773218590478457>] Wins",
                        value = comma_value(Wins),
                        inline = false
                    },                                                                                                                                                                                                                                            
                },
                ["thumbnail"] = {
                    ["url"] = "",
                },
                author = {
                    name = tostring(game:GetService("Players").LocalPlayer.DisplayName.." | id#"..game.Players.LocalPlayer.UserId),
                    url = "https://www.roblox.com/users/" .. game.Players.LocalPlayer.UserId .. "/profile",
                    icon_url = ""
                },
				footer = {
        			text = "InfinityWare | dsc.gg/ireborn",
        			icon_url = "https://cdn.discordapp.com/attachments/1015258948472934460/1045354177796255845/1.1_cool-removebg.png"
      		},
			    timestamp = "2023-08-30T21:45:00.000Z"
            },
        },
    }
    local newdata = game:GetService("HttpService"):JSONEncode(data2)

    local headers = {
        ["content-type"] = "application/json"
    }
    request = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request or HttpPost
    local abcdef = {Url = getgenv().Url , Body = newdata, Method = "POST", Headers = headers}
    request(abcdef)
end
function GetStats()
    if getgenv().Url ~= "" and getgenv().Webhook == true then
		lp = game.Players.LocalPlayer
			a = lp:GetAttributes()
				local TotalStrength = lp:GetAttribute("TotalStrength")
				local Rebirths = lp:GetAttribute("Rebirths")
				local ZoneMulti = lp:GetAttribute("ZoneMultiplier")
				local Knuckles = lp:GetAttribute("KnuckleStrength")
				local Hand = lp:GetAttribute("HandStrength")
				local Bicep = lp:GetAttribute("BicepPower")
				local Wins = lp:GetAttribute("Wins")
            		MWebHook(TotalStrength,Rebirths,ZoneMulti,Knuckles,Hand,Bicep,Wins)
                end
end

while getgenv().Webhook  do
    GetStats()
    wait()
end
end)
end)



local webhookQueue = {}



local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
ThemeManager:ApplyToTab(Tabs['UI Settings'])
ThemeManager:ApplyTheme('Jester')
SaveManager:LoadAutoloadConfig()
-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder('LinoriaLibSettings')
SaveManager:SetFolder('InfinityWare/specific-game')
